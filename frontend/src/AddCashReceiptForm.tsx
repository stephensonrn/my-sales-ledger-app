// src/AddCashReceiptForm.tsx
import React, { useState } from 'react';
import { generateClient } from 'aws-amplify/api';
import { 
    Button, 
    TextField, 
    Text, 
    Card, 
    Heading, 
    Alert,
    Flex,
    View 
} from '@aws-amplify/ui-react';

// --- CORRECTED IMPORTS ---
// Assuming API.ts is in src/graphql/ and AddCashReceiptForm.tsx is in src/
import { 
    AdminAddCashReceiptDocument,
    type AdminAddCashReceiptMutation,
    type AdminAddCashReceiptMutationVariables, // This should be generated by codegen
    type CurrentAccountTransaction 
} from './graphql/API'; 
// --- END CORRECTED IMPORTS ---

const client = generateClient();

interface AddCashReceiptFormProps {
  selectedTargetSub: string | null; // ID of the user for whom the cash receipt is being added
  onCashReceiptAdded?: (newTransaction: CurrentAccountTransaction) => void; // Optional callback
}

function AddCashReceiptForm({ selectedTargetSub, onCashReceiptAdded }: AddCashReceiptFormProps) {
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const handleAddCashReceipt = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    
    if (!selectedTargetSub) { 
      setError('No target user selected. Please select a user first.'); 
      setSuccess(null);
      return; 
    }
    
    const numericAmount = parseFloat(amount);
    if (isNaN(numericAmount) || numericAmount <= 0) {
      setError('Please enter a valid positive amount for the cash receipt.');
      setSuccess(null);
      return;
    }

    setIsLoading(true);
    setError(null);
    setSuccess(null);

    // Your GraphQL schema for adminAddCashReceipt is:
    // adminAddCashReceipt(targetOwnerId: String!, amount: Float!, description: String): CurrentAccountTransaction
    // The variables object should match these direct arguments.
    const variables: AdminAddCashReceiptMutationVariables = {
      targetOwnerId: selectedTargetSub,
      amount: numericAmount,
      description: description || null, // Pass null if description is empty
    };

    try {
      console.log("AddCashReceiptForm: Calling AdminAddCashReceipt with variables:", variables);
      const response = await client.graphql<AdminAddCashReceiptMutation>({
        query: AdminAddCashReceiptDocument,
        variables: variables,
        authMode: 'userPool' // Admin user performs this action
      });

      console.log("AddCashReceiptForm: Response from mutation:", response);

      if (response.errors && response.errors.length > 0) {
        // Throw the array of errors or the first error
        throw response.errors; 
      }

      const createdTransaction = response.data?.adminAddCashReceipt;

      if (createdTransaction) {
        setSuccess(`Successfully added cash receipt (ID: ${createdTransaction.id}) for user ${selectedTargetSub.substring(0,8)}...`);
        setAmount(''); 
        setDescription('');
        if (onCashReceiptAdded) {
          onCashReceiptAdded(createdTransaction as CurrentAccountTransaction);
        }
      } else {
        // This case implies the mutation completed on the backend (no GraphQL errors thrown by resolver)
        // but returned null for the data field. This is unusual for a successful creation
        // unless the schema defines it as nullable and the resolver intentionally returned null.
        console.error("AddCashReceiptForm: Submission successful, but server did not return transaction data.", response.data);
        setError("Submission processed, but could not confirm cash receipt details from the server.");
      }
    } catch (err: any) {
      console.error("AddCashReceiptForm: Error adding cash receipt:", err);
      let errorMessages = 'An unknown error occurred.';
      if (Array.isArray(err)) { // Check if err is an array of GraphQL errors
        errorMessages = err.map((e: any) => e.message || 'GraphQL error').join(', ');
      } else if (err.message) { // Standard JavaScript error
        errorMessages = err.message;
      }
      setError(`Failed to add cash receipt: ${errorMessages}`);
    } finally {
      setIsLoading(false);
    }
  };

  // The AdminPage component should only render this form if selectedTargetSub is valid.
  // So, the check below is an additional safeguard if used elsewhere or if prop becomes null.
  if (!selectedTargetSub) {
    return <Alert variation="info">Please select a user before adding a cash receipt.</Alert>;
  }

  return (
    // The wrapping Card and Heading are now in AdminPage.tsx based on your last provided AdminPage code.
    // If you want this component to be more self-contained with its own Card, uncomment the lines below.
    // <Card variation="outlined" padding="medium">
    //   <Heading level={5} marginBottom="small">Add Cash Receipt</Heading>
    //   <Text variation="tertiary" fontSize="small" marginBottom="medium">
    //     Adding receipt for User Sub: <code>{selectedTargetSub}</code>
    //   </Text>
      <View as="form" onSubmit={handleAddCashReceipt}>
        <Flex direction="column" gap="small">
          <TextField 
            label="Amount (Â£):" 
            type="number" 
            step="0.01" 
            min="0.01" 
            value={amount} 
            onChange={(e) => setAmount(e.target.value)} 
            required 
            isDisabled={isLoading} 
            placeholder="e.g., 50.00"
          />
          <TextField 
            label="Description (Optional):" 
            type="text" 
            value={description} 
            onChange={(e) => setDescription(e.target.value)} 
            isDisabled={isLoading} 
            placeholder="e.g., Cash payment from customer" 
          />
          <Button type="submit" isLoading={isLoading} variation="primary" marginTop="small">
            Add Cash Receipt
          </Button>
        </Flex>
        {success && <Alert variation="success" isDismissible={true} onDismiss={() => setSuccess(null)} marginTop="small">{success}</Alert>}
        {error && <Alert variation="error" isDismissible={true} onDismiss={() => setError(null)} marginTop="small">{error}</Alert>}
      </View>
    // </Card>
  );
}
export default AddCashReceiptForm;