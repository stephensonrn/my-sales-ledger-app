# Schema for Sales Ledger Application - Corrected and Updated

# --- Enums ---
enum LedgerEntryType {
  INVOICE
  CREDIT_NOTE
  INCREASE_ADJUSTMENT
  DECREASE_ADJUSTMENT
  CASH_RECEIPT
}

enum CurrentAccountTransactionType {
  PAYMENT_REQUEST
  CASH_RECEIPT
}

# --- Data Models ---
type LedgerEntry {
  id: ID!
  owner: String! # Cognito User Sub ID
  type: LedgerEntryType!
  amount: Float!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional: ID of admin if created by admin
}

type AccountStatus {
  id: ID! # Typically the owner's Cognito User Sub ID (if this is the PK) or an auto-generated ID
  owner: String! # Cognito User Sub ID this status pertains to
  totalUnapprovedInvoiceValue: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional: ID of admin if created/updated by admin
}

type CurrentAccountTransaction {
  id: ID!
  owner: String! # Cognito User Sub ID
  type: CurrentAccountTransactionType!
  amount: Float!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional: ID of admin if created by admin
}

type UserAttribute {
  name: String!
  value: String
}

type CognitoUser {
  username: String!             # From Cognito
  sub: String!                  # Cognito's unique 'subject' identifier
  status: String                # e.g., 'CONFIRMED', 'UNCONFIRMED'
  enabled: Boolean
  createdAt: AWSDateTime        # Cognito's UserCreateDate
  updatedAt: AWSDateTime        # Cognito's UserLastModifiedDate (use this or lastModifiedAt consistently)
  attributes: [UserAttribute]   # For other raw Cognito attributes

  # Fields to ensure GraphQL queries don't cause "FieldUndefined"
  id: ID!                       # Primary GraphQL ID for user; Lambda should map Cognito 'sub' or 'Username' here.
  email: String                 # Lambda should extract email from Cognito attributes.
  lastModifiedAt: AWSDateTime   # Lambda should map Cognito 'UserLastModifiedDate' here.
  groups: [String]              # Lambda should fetch and provide user's Cognito groups.
}

# --- Structured Response Types ---
type AdminPaymentRequestResult {
  success: Boolean!
  message: String
  transactionId: ID
}

# --- Connection Types for List Operations ---
type LedgerEntryConnection {
  items: [LedgerEntry] # Consider [LedgerEntry!] if items in the list cannot be null
  nextToken: String
}

type AccountStatusConnection {
  items: [AccountStatus] # Consider [AccountStatus!]
  nextToken: String
}

type CurrentAccountTransactionConnection {
  items: [CurrentAccountTransaction] # Consider [CurrentAccountTransaction!]
  nextToken: String
}

type UserListResult {
  users: [CognitoUser] # This uses the updated CognitoUser type
  nextToken: String
}

# --- Input Types for Mutations ---
input CreateLedgerEntryInput {
  type: LedgerEntryType!
  amount: Float!
  description: String
}

input UpdateLedgerEntryInput {
  id: ID!
  type: LedgerEntryType
  amount: Float
  description: String
}

input UpdateAccountStatusInput {
  id: ID! # The ID of the AccountStatus record to update
  totalUnapprovedInvoiceValue: Float!
}

input AdminCreateLedgerEntryInput {
  type: LedgerEntryType!
  amount: Float!
  description: String
  targetUserId: ID! # The 'owner' (user sub) this ledger entry is for
}

input AdminRequestPaymentForUserInput {
  targetUserId: ID!
  amount: Float!
  paymentDescription: String
}

input SendPaymentRequestInput {
  amount: Float!
  toEmail: String!    # Added: Non-nullable
  subject: String!    # Added: Non-nullable
  body: String!       # Added: Non-nullable
}

input AdminCreateAccountStatusInput {
  accountId: ID!      # The Account ID (likely user sub) this status is for
  initialUnapprovedInvoiceValue: Float!
  status: String!     # The initial status string
}

input AdminAddCashReceiptInput {
  targetOwnerId: ID! # The 'owner' (user sub) this cash receipt is for
  amount: Float!
  description: String
}


# --- Input Types for Query Filters ---
input ModelStringFilterInput {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  eq: ID
  ne: ID
}

input ModelFloatFilterInput {
  eq: Float
  ne: Float
  gt: Float
  lt: Float
  ge: Float
  le: Float
}

input LedgerEntryFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput # Filter by owner's sub
  type: ModelStringFilterInput
  createdAt: ModelStringFilterInput
}

input AccountStatusFilterInput {
  id: ModelIDFilterInput    # Filter by AccountStatus record ID
  owner: ModelStringFilterInput # Filter by the owner (user sub) the status pertains to
  totalUnapprovedInvoiceValue: ModelFloatFilterInput
  createdAt: ModelStringFilterInput
}

input CurrentAccountTransactionFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput # Filter by owner's sub
  type: ModelStringFilterInput
  createdAt: ModelStringFilterInput
}

input UserFilterInput { # For adminListUsers query
  username: ModelStringFilterInput
  email: ModelStringFilterInput
  status: ModelStringFilterInput
  # group: ModelStringFilterInput # Example if filtering by a single group
}

# --- Queries ---
type Query @aws_cognito_user_pools {

  getLedgerEntry(id: ID!): LedgerEntry
  listLedgerEntries(
    filter: LedgerEntryFilterInput
    limit: Int
    nextToken: String
  ): LedgerEntryConnection

  getAccountStatus(id: ID!): AccountStatus # Gets an AccountStatus record by its primary ID
  listAccountStatuses( # Lists AccountStatus records, likely filtered by owner via the filter input
    filter: AccountStatusFilterInput
    limit: Int
    nextToken: String
  ): AccountStatusConnection

  getCurrentAccountTransaction(id: ID!): CurrentAccountTransaction
  listCurrentAccountTransactions(
    filter: CurrentAccountTransactionFilterInput
    limit: Int
    nextToken: String
  ): CurrentAccountTransactionConnection

  adminListUsers(
    limit: Int
    nextToken: String
    filter: UserFilterInput
  ): UserListResult @aws_auth(cognito_groups: ["Admin"])
}

# --- Mutations ---
type Mutation @aws_cognito_user_pools {

  createLedgerEntry(input: CreateLedgerEntryInput!): LedgerEntry
  updateLedgerEntry(input: UpdateLedgerEntryInput!): LedgerEntry
  deleteLedgerEntry(id: ID!): LedgerEntry # Consider: DeleteResponse { id: ID!, status: String! }

  adminCreateLedgerEntry(input: AdminCreateLedgerEntryInput!): LedgerEntry
    @aws_auth(cognito_groups: ["Admin"])

  updateAccountStatus(input: UpdateAccountStatusInput!): AccountStatus
  adminCreateAccountStatus(input: AdminCreateAccountStatusInput!): AccountStatus
    @aws_auth(cognito_groups: ["Admin"])

  adminAddCashReceipt(input: AdminAddCashReceiptInput!): CurrentAccountTransaction
    @aws_auth(cognito_groups: ["Admin"])

  sendPaymentRequestEmail(input: SendPaymentRequestInput!): String # Consider: EmailStatus { success: Boolean!, message: String }
  adminRequestPaymentForUser(input: AdminRequestPaymentForUserInput!): AdminPaymentRequestResult
    @aws_auth(cognito_groups: ["Admin"])
}

# --- Subscriptions ---
type Subscription @aws_cognito_user_pools {
  onCreateLedgerEntry(owner: String): LedgerEntry
    @aws_subscribe(mutations: ["createLedgerEntry", "adminCreateLedgerEntry"])
}