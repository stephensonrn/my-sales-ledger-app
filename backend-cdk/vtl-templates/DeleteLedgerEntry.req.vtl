## VTL Request Template for Mutation.deleteLedgerEntry
## Deletes a ledger entry.
## - Includes input validation for 'id'.
## - Non-admins can only delete their own entries.
## - Admins can delete any entry by its ID.
## - Includes minimal logging.

#set( $targetId = $context.args.id )

## --- 1. Input Validation ---
#if( $util.isNullOrBlank($targetId) )
  $util.error("Missing required argument: id for deleteLedgerEntry.", "ValidationException")
#end

## --- 2. Logging ---
$util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Requesting User (sub): ${context.identity.sub}"))
$util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Attempting to delete LedgerEntry ID: ${targetId}"))
#if( $context.identity.groups && !$context.identity.groups.isEmpty() )
    $util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: User Groups: $util.toJson($context.identity.groups)"))
#end

## --- 3. Condition Expression for Authorization & Existence ---
#set( $conditionExpressionParts = ["attribute_exists(id)"] ) ## Base condition: item must exist
#set( $expressionNames = {} )
#set( $expressionValues = {} )

#set( $isActuallyAdmin = false )
#if( $context.identity.groups && $context.identity.groups.contains("Admin") )
    #set( $isActuallyAdmin = true )
#end

#if( $isActuallyAdmin ) ## Simplified boolean check
  $util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Admin user. Applying base condition only (attribute_exists(id))."))
  ## Admin user: The base condition "attribute_exists(id)" is sufficient.
#else
  $util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Non-admin user. Adding owner check to condition."))
  ## Non-admin user: Enforce that they are deleting their own entry.
  $util.qr($conditionExpressionParts.add("#ownerAttributeCond = :loggedInUserSubCond"))
  $util.qr($expressionNames.put("#ownerAttributeCond", "owner"))
  $util.qr($expressionValues.put(":loggedInUserSubCond", $util.dynamodb.toDynamoDB($context.identity.sub)))
#end

#set( $finalConditionExpression = $util.listJoin(" AND ", $conditionExpressionParts) )
$util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Final Condition Expression: $finalConditionExpression"))


## --- DynamoDB DeleteItem Operation ---
#set( $dynamoDBRequest = {
  "version": "2018-05-29",
  "operation": "DeleteItem",
  "key": {
    "id": $util.dynamodb.toDynamoDB($targetId)
  },
  "condition": {
    "expression": $finalConditionExpression
    ## For AppSync DeleteItem, expressionNames and expressionValues related to the condition
    ## are placed within this "condition" object.
  }
  ## Optional: If you want the response VTL to have access to the deleted item's attributes:
  ## ,"returnValues": "ALL_OLD"
})

#if( !$expressionNames.isEmpty() )
  $util.qr($dynamoDBRequest.condition.put("expressionNames", $expressionNames))
#end
#if( !$expressionValues.isEmpty() )
  $util.qr($dynamoDBRequest.condition.put("expressionValues", $expressionValues))
#end

$util.qr($ctx.log.info("DeleteLedgerEntry.req.vtl: Final DynamoDB Request Object: $util.toJson($dynamoDBRequest)"))

$util.toJson($dynamoDBRequest)