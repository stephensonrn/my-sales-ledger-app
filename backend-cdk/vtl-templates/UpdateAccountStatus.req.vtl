## VTL Request Template for Mutation.updateAccountStatus
## Updates an account status item.
## - Non-admins can only update their own account status (where input.id matches their sub).
## - Admins can update the account status for any user specified by input.id.

#set( $targetId = $ctx.args.input.id )

#if( $util.isNullOrBlank($targetId) )
  $util.error("Input 'id' is required to update an account status.", "ValidationException")
#end

## Define the update expression, names, and values
#set( $updateExpression = "SET #totalUnapprovedInvoiceValue = :totalUnapprovedInvoiceValueVal, #updatedAt = :updatedAtVal" )
#set( $expressionNames = {
  "#totalUnapprovedInvoiceValue": "totalUnapprovedInvoiceValue",
  "#updatedAt": "updatedAt"
})
#set( $expressionValues = {
  ":totalUnapprovedInvoiceValueVal": $util.dynamodb.toDynamoDB($ctx.args.input.totalUnapprovedInvoiceValue),
  ":updatedAtVal": $util.dynamodb.toDynamoDB($util.time.nowISO8601())
})

## Define the condition expression based on user role
#set( $conditionExpressionParts = ["attribute_exists(id)"] ) ## Base condition: item must exist

#if( !($context.identity.groups && $context.identity.groups.contains("Admin")) )
  ## Non-admin user: Enforce that they are updating their own account status.
  ## Assumes 'id' of AccountStatus item IS the owner's sub.
  $util.qr($conditionExpressionParts.add("#itemIdCond = :loggedInUserSubCond"))
  $util.qr($expressionNames.put("#itemIdCond", "id")) 
  $util.qr($expressionValues.put(":loggedInUserSubCond", $util.dynamodb.toDynamoDB($context.identity.sub)))
#else
  ## Admin user: The base condition "attribute_exists(id)" is sufficient.
  ## They are trusted to update the record specified by $targetId if it exists.
#end

#set( $finalConditionExpression = $util.listJoin(" AND ", $conditionExpressionParts) )

{
  "version": "2018-05-29",
  "operation": "UpdateItem",
  "key": {
    "id": $util.dynamodb.toDynamoDB($targetId) ## Using toDynamoDB
  },
  "update": {
    "expression": $updateExpression,
    "expressionNames": $expressionNames,
    "expressionValues": $expressionValues
  },
  "condition": {
    "expression": $finalConditionExpression
    ## expressionNames and expressionValues for the condition are now part
    ## of the main maps ($expressionNames, $expressionValues) used by the "update" block.
    ## DynamoDB will use these for both.
  }
}