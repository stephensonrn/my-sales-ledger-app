## VTL Request Template for Query.listAccountStatuses
## Fetches account statuses.
## - Non-admins see their own status.
## - Admins can see status for the owner specified in args.filter.owner.eq.
## - If admin provides no owner filter, they see their own status.

#set( $limit = $util.defaultIfNull($context.args.limit, 1) ) ## Often only one status per user
#set( $nextToken = $util.defaultIfNullOrBlank($context.args.nextToken, null) )

#set( $ownerIdToQuery = $context.identity.sub ) ## Default to logged-in user's sub

#if( $context.identity.groups && $context.identity.groups.contains("Admin") )
  #if( $context.args.filter && $context.args.filter.owner && $context.args.filter.owner.eq && !$util.isNullOrEmpty($context.args.filter.owner.eq) )
    #set( $ownerIdToQuery = $context.args.filter.owner.eq )
  #end
#end

## Ensure ownerIdToQuery is not null or empty
#if( $util.isNullOrEmpty($ownerIdToQuery) )
  $util.error("Owner ID for query is null or empty. This should not happen if user is authenticated.", "InvalidRequestException")
#end

{
  "version": "2018-05-29",
  "operation": "Query",
  "index": "byOwner", ## Assumes your GSI is named 'byOwner'
  "query": {
    "expression": "#ownerAttribute = :ownerValue",
    "expressionNames": {
      "#ownerAttribute": "owner" ## Actual attribute name for owner in DynamoDB
    },
    "expressionValues": {
      ":ownerValue": $util.dynamodb.toDynamoDBJson($ownerIdToQuery)
    }
  },
  "limit": $limit,
  #if( $nextToken )
    "nextToken": $nextToken
  #end
}