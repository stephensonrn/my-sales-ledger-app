#set( $input = $context.args.input )
#set( $targetId = $input.id )

#if( $util.isNullOrBlank($targetId) )
  $util.error("Input 'id' is required to update a ledger entry.", "ValidationException")
#end

$util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Input arguments: $util.toJson($input)"))
$util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Logged-in user sub: ${context.identity.sub}"))
#if( $context.identity.groups && !$context.identity.groups.isEmpty() )
    $util.qr($ctx.log.info("LEDGER_UPDATE_VTL: User Groups: $util.toJson($context.identity.groups)"))
#end

## Optional: Validate non-null for required fields if provided
#if( $input.containsKey("type") && $util.isNull($input.type) )
  $util.error("input.type cannot be null if provided for update.", "ValidationException")
#end

#if( $input.containsKey("amount") && $util.isNull($input.amount) )
  $util.error("input.amount cannot be null if provided for update.", "ValidationException")
#end

#set( $updateSetParts = [] )
#set( $updateRemoveParts = [] )
#set( $expressionNames = {} )
#set( $expressionValues = {} )

$util.qr($updateSetParts.add("#updatedAt = :updatedAtVal"))
$util.qr($expressionNames.put("#updatedAt", "updatedAt"))
$util.qr($expressionValues.put(":updatedAtVal", $util.dynamodb.toDynamoDB($util.time.nowISO8601())))

## Example of optional "updatedByAdmin"
#*
$util.qr($updateSetParts.add("#updatedBy = :updatedByVal"))
$util.qr($expressionNames.put("#updatedBy", "updatedByAdmin"))
$util.qr($expressionValues.put(":updatedByVal", $util.dynamodb.toDynamoDB($context.identity.sub)))
*#

## type field
#if( $input.containsKey("type") && !$util.isNullOrBlank($input.type) )
  $util.qr($updateSetParts.add("#type = :typeVal"))
  $util.qr($expressionNames.put("#type", "type"))
  $util.qr($expressionValues.put(":typeVal", $util.dynamodb.toDynamoDB($input.type)))
#end

## amount field
#if( $input.containsKey("amount") && !$util.isNull($input.amount) )
  $util.qr($updateSetParts.add("#amount = :amountVal"))
  $util.qr($expressionNames.put("#amount", "amount"))
  $util.qr($expressionValues.put(":amountVal", $util.dynamodb.toDynamoDB($input.amount)))
#end

## description field with REMOVE if null
#if( $input.containsKey("description") )
  #if( $util.isNull($input.description) )
    $util.qr($updateRemoveParts.add("#description"))
    $util.qr($expressionNames.put("#description", "description"))
  #else
    $util.qr($updateSetParts.add("#description = :descriptionVal"))
    $util.qr($expressionNames.put("#description", "description"))
    $util.qr($expressionValues.put(":descriptionVal", $util.dynamodb.toDynamoDB($input.description)))
  #end
#end

## Build update expression
#set( $finalUpdateExpression = "" )
#if( !$updateSetParts.isEmpty() )
  #set( $finalUpdateExpression = "SET " + $util.listJoin(", ", $updateSetParts) )
#end
#if( !$updateRemoveParts.isEmpty() )
  #if( !$finalUpdateExpression.isEmpty() )
    #set( $finalUpdateExpression = $finalUpdateExpression + " " )
  #end
  #set( $finalUpdateExpression = $finalUpdateExpression + "REMOVE " + $util.listJoin(", ", $updateRemoveParts) )
#end

$util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Constructed Update Expression: $finalUpdateExpression"))

## Condition for ownership and existence
#set( $conditionExpressionParts = ["attribute_exists(id)"] )
#set( $isActuallyAdmin = false )
#if( $context.identity.groups && $context.identity.groups.contains("Admin") )
  #set( $isActuallyAdmin = true )
#end

#if( $isActuallyAdmin == false )
  $util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Non-admin user. Adding owner condition."))
  $util.qr($conditionExpressionParts.add("#ownerCond = :ownerCondVal"))
  $util.qr($expressionNames.put("#ownerCond", "owner"))
  $util.qr($expressionValues.put(":ownerCondVal", $util.dynamodb.toDynamoDB($context.identity.sub)))
#else
  $util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Admin user. No owner condition added."))
#end

#set( $finalConditionExpression = $util.listJoin(" AND ", $conditionExpressionParts) )
$util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Final Condition Expression: $finalConditionExpression"))

#set( $dynamoDBRequest = {
  "version": "2018-05-29",
  "operation": "UpdateItem",
  "key": {
    "id": $util.dynamodb.toDynamoDB($targetId)
  },
  "update": {
    "expression": $finalUpdateExpression
  }
})

#if( !$expressionNames.isEmpty() )
  $util.qr($dynamoDBRequest.update.put("expressionNames", $expressionNames))
#end
#if( !$expressionValues.isEmpty() )
  $util.qr($dynamoDBRequest.update.put("expressionValues", $expressionValues))
#end

$util.qr($dynamoDBRequest.put("condition", {"expression": $finalConditionExpression}))

$util.qr($ctx.log.info("LEDGER_UPDATE_VTL: Final DynamoDB Request Object: $util.toJson($dynamoDBRequest)"))

$util.toJson($dynamoDBRequest)
