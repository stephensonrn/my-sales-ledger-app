## Admin List Users Request Mapping Template
## Revised to explicitly handle nextToken and filter for robust JSON payload

## Assuming your GraphQL query arguments (limit, nextToken, filter) are top-level.
## If they are nested under an 'input' object (e.g., adminListUsers(input: ListUsersInput)),
## change the next line to: #set( $gqlArgs = $context.arguments.input )
#set( $gqlArgs = $context.arguments )

## Log the raw input arguments for debugging purposes
$util.qr($ctx.log.info("AdminListUsers.req.vtl - Input arguments: $util.toJson($gqlArgs)"))

## Prepare the query parameters for the Lambda
#set( $limit = $util.defaultIfNull($gqlArgs.limit, 10) )
#set( $rawNextToken = $util.defaultIfNullOrBlank($gqlArgs.nextToken, null) ) ## Get raw token or VTL null
#set( $filterValue = $gqlArgs.filter ) ## Get raw filter or VTL null

#if( !$util.isNull($filterValue) )
    $util.qr($ctx.log.info("AdminListUsers.req.vtl - Filter provided: $util.toJson($filterValue)"))
#else
    $util.qr($ctx.log.info("AdminListUsers.req.vtl - No filter provided."))
#end

## Optional: Add validation for limit if necessary (e.g., ensure it's within a valid range)
## #if( $limit <= 0 || $limit > 100 )
##   $util.error("Limit must be between 1 and 100.", "ValidationException")
## #end

## Create the base payload for the Lambda function
#set( $payload = {
    "limit": $limit ## limit will be a JSON number
})

## Conditionally add nextToken to the payload
#if( !$util.isNull($rawNextToken) )
    ## If rawNextToken is a string, it will be passed as a JSON string
    $util.qr($payload.put("nextToken", "$rawNextToken"))
#else
    ## If rawNextToken is VTL null, pass JSON null
    $util.qr($payload.put("nextToken", $null))
#end

## Conditionally add filter to the payload
#if( !$util.isNull($filterValue) )
    ## If filterValue is a VTL map, it will be passed as a JSON object
    $util.qr($payload.put("filter", $filterValue))
#else
    ## If filterValue is VTL null, pass JSON null
    $util.qr($payload.put("filter", $null))
#end
## Note: If your Lambda specifically expects the 'filter' field to be a stringified JSON
## (e.g., "{\"key\":\"value\"}" or the string "null"),
## then you should use $util.qr($payload.put("filter", $util.toJson($filterValue))) instead for the filter.
## The current approach passes it as a direct JSON object or JSON null.

## Final payload structure
{
  "payload": $payload
}