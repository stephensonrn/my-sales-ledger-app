## Admin Request Payment For User Response Mapping Template

#if($ctx.error)
    ## If the Lambda function itself threw an error (e.g., timed out, crashed,
    ## or $util.error was called in Lambda response VTL if it had one)
    $util.error($ctx.error.message, $ctx.error.type)
#end

## Log the raw result from the Lambda function for debugging
#set( $lambdaResult = $ctx.result )
$util.qr($ctx.log.info("AdminRequestPaymentForUser.res.vtl - Raw result from Lambda: $util.toJson($lambdaResult)"))

## Option 1: Static Status Message (enhanced from your original template)
## This is suitable if the Lambda completing successfully is enough confirmation,
## and your GraphQL mutation is defined to return a type like:
## type PaymentRequestStatus { status: String! } or similar.

#set( $responseStatus = "Payment request initiated for user." ) ## Default success message

## Optionally, you can make the status message more dynamic based on the Lambda's actual response.
## For example, if your Lambda returns a payload like {"success": true, "message": "Specific status..."}
## or {"success": false, "errorMessage": "Details..."}
#if( !$util.isNull($lambdaResult) )
    #if( $lambdaResult.containsKey("success") && $lambdaResult.success == false )
        #if( $lambdaResult.containsKey("errorMessage") )
            #set( $responseStatus = $lambdaResult.errorMessage )
            ## Depending on your design, you might want to throw a GraphQL error here instead:
            ## $util.error($lambdaResult.errorMessage, "PaymentRequestError")
        #else
            #set( $responseStatus = "Payment request failed for an unspecified reason." )
            ## $util.error("Payment request failed for an unspecified reason.", "PaymentRequestError")
        #end
    #elseif( $lambdaResult.containsKey("status") && !$util.isNullOrBlank($lambdaResult.status) )
        ## If the Lambda returns its own 'status' field, prefer that.
        #set( $responseStatus = $lambdaResult.status )
    #elseif( $lambdaResult.containsKey("message") && !$util.isNullOrBlank($lambdaResult.message) )
        ## Or if it returns a 'message' field.
        #set( $responseStatus = $lambdaResult.message )
    #end
#end

{
  "status": $util.toJson($responseStatus)
}

## Option 2: Directly return the Lambda result
## If your Lambda function returns a JSON object that *exactly* matches
## the GraphQL return type of your adminRequestPaymentForUser mutation,
## (e.g., Lambda returns {"status": "...", "referenceId": "..."} and GraphQL type matches)
## you could simply do:
#*
#if($ctx.error)
    $util.error($ctx.error.message, $ctx.error.type)
#end
$util.qr($ctx.log.info("AdminRequestPaymentForUser.res.vtl - Raw result from Lambda: $util.toJson($ctx.result)"))
$util.toJson($ctx.result)
*#