## VTL Request Template for Mutation.adminCreateLedgerEntry
## Allows an Admin (user in "Admin" group) to create a ledger entry for a specified targetUserId.
## Incorporates recommendations for auditing and input handling.

#set( $input = $context.args.input )

## --- Input Validation ---
#if( $util.isNullOrBlank($input.targetUserId) )
  $util.error("input.targetUserId is required to specify the owner of the ledger entry.", "ValidationException")
#end
#if( $util.isNullOrBlank($input.type) )
  $util.error("input.type is required for the ledger entry.", "ValidationException")
#end
#if( $util.isNull($input.amount) ) ## Amount can be 0, so we check for null, not isNullOrBlank
  $util.error("input.amount is required for the ledger entry.", "ValidationException")
#end

## --- Prepare the item to be put into DynamoDB ---
#set( $itemId = $util.autoId() )
#set( $now = $util.time.nowISO8601() )
#set( $loggedInAdminSub = $context.identity.sub )

#set( $itemToCreate = {
    "id": $itemId,
    "owner": $input.targetUserId,  ## Maps input.targetUserId to the 'owner' attribute in DynamoDB
    "type": $input.type,
    "amount": $input.amount,
    "createdAt": $now,
    "updatedAt": $now,
    "createdByAdmin": $loggedInAdminSub ## Records which admin created this entry
} )

## Handle optional description:
## If 'description' is present in the input (even if null), it will be added to the item.
## If 'description' is not part of the input, it won't be added to the item.
#if( $input.containsKey("description") )
    $util.qr($itemToCreate.put("description", $input.description))
#end

## --- Optional Audit Metadata (Recommendation 4) ---
## To use these, add the corresponding fields to your LedgerEntry type in schema.graphql:
##   createdByIp: AWSIPAddress  (or String)
##   adminGroups: [String]    (or AWSJSON for the raw array)

#if($context.identity.sourceIp && $context.identity.sourceIp.size() > 0)
    $util.qr($itemToCreate.put("createdByIp", $context.identity.sourceIp[0]))
#end
#if($context.identity.groups && !$context.identity.groups.isEmpty())
    $util.qr($itemToCreate.put("adminGroups", $util.toJson($context.identity.groups))) ## Stores as a JSON string array
#end


## --- Logging (Recommendation 5 - keeping it simple for now) ---
## For more advanced conditional logging (e.g., only in dev):
## You could pass a 'debug: true' argument in your GraphQL mutation input,
## and then wrap logs with: #if( $input.debug == true ) $util.log.info(...) #end
## Or, manage different VTL versions for dev/prod.
## The current logs will always execute.
$util.qr($ctx.log.info("ADMIN_CREATE_LEDGER_REQ: Logged-in admin: $loggedInAdminSub"))
$util.qr($ctx.log.info("ADMIN_CREATE_LEDGER_REQ: Target owner for new entry: $input.targetUserId"))
$util.qr($ctx.log.info("ADMIN_CREATE_LEDGER_REQ: Item to be created (before toMapValues): $util.toJson($itemToCreate)"))


## --- DynamoDB PutItem Operation ---
{
    "version": "2018-05-29",
    "operation": "PutItem",
    "attributeValues": $util.dynamodb.toMapValues($itemToCreate),
    "condition": {
        "expression": "attribute_not_exists(id)" ## Prevent overwriting if an ID collision somehow occurred
    }
}