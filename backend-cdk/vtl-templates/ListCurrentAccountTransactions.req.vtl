## VTL Request Template for Query.listCurrentAccountTransactions
## ATTEMPT_MAY30_TRANSACTION_FINAL_FIX - Uses claims.sub, logs ownerIdToQuery, correct DDB format, includes filters

#set( $limit = $util.defaultIfNull($context.args.limit, 20) )
#set( $nextToken = $util.defaultIfNullOrBlank($context.args.nextToken, null) )

## --- Determine the owner ID to query ---
#set( $ownerIdToQuery = $util.defaultIfNullOrBlank($context.identity.claims.sub, null) )
#if( $util.isNull($ownerIdToQuery) && !$util.isNull($context.identity.sub) )
    $util.qr($ctx.log.info("TRANS_REQ_VTL_FINAL: Falling back to context.identity.sub for ownerIdToQuery"))
    #set( $ownerIdToQuery = $context.identity.sub )
#end

## --- Admin Override Logic ---
#if( $context.identity.groups && $context.identity.groups.contains("Admin") )
  #if( $context.args.filter && $context.args.filter.owner && $context.args.filter.owner.eq && !$util.isNullOrEmpty($context.args.filter.owner.eq) )
    #set( $adminLogMsg = "TRANS_REQ_VTL_FINAL: Admin override. Setting ownerIdToQuery from filter: " + $context.args.filter.owner.eq )
    $util.qr($ctx.log.info($adminLogMsg))
    #set( $ownerIdToQuery = $context.args.filter.owner.eq )
  #else
    #set( $adminLogMsg = "TRANS_REQ_VTL_FINAL: Admin call, no owner filter. Defaulting to admin's own ID: " + $ownerIdToQuery )
    $util.qr($ctx.log.info($adminLogMsg))
  #end
#else
    #set( $nonAdminLogMsg = "TRANS_REQ_VTL_FINAL: Non-admin call. Using identity's ID: " + $ownerIdToQuery )
    $util.qr($ctx.log.info($nonAdminLogMsg))
#end

## --- Log the resolved ownerIdToQuery safely ---
#set( $logResolvedOwnerId = "null_or_empty" )
#if( !$util.isNullOrBlank($ownerIdToQuery) )
  #set( $logResolvedOwnerId = $ownerIdToQuery )
#end
$util.qr($ctx.log.info("TRANS_REQ_VTL_FINAL: Resolved ownerIdToQuery before validation = ${logResolvedOwnerId}"))

## --- Ensure ownerIdToQuery is not null or empty ---
#if( $util.isNullOrEmpty($ownerIdToQuery) )
  $util.error("Owner ID for query is null or empty. This should not happen if user is authenticated or admin provides a filter.", "InvalidRequestException")
#end

## --- Initialize Expression Attributes ---
#set( $expressionNames = { "#ownerAttribute": "owner" } )
#set( $expressionValues = { ":ownerValue": $util.dynamodb.toDynamoDB($ownerIdToQuery) } )
#set( $keyConditionExpression = "#ownerAttribute = :ownerValue" )

## --- Build base query object ---
#set( $queryObj = {
  "version": "2018-05-29",
  "operation": "Query",
  "index": "byOwner", ## Assumes GSI on CurrentAccountTransactionTable is named 'byOwner'
  "query": {
    "expression": $keyConditionExpression,
    "expressionNames": $expressionNames,   ## This map will be expanded by filters
    "expressionValues": $expressionValues  ## This map will be expanded by filters
  },
  "limit": $limit,
  "scanIndexForward": false ## To get newest transactions first if 'createdAt' is sort key on GSI
})

## --- Handle pagination ---
#if( $nextToken )
  $util.qr($queryObj.put("nextToken", "$nextToken")) ## Ensure $nextToken is quoted
#end

## --- Optional filters based on CurrentAccountTransactionFilterInput ---
#if( $context.args.filter )
  #set( $filterExpressionParts = [] )
  ## We will add to the existing $expressionNames and $expressionValues maps

  ## Filter by type (example)
  #if( $context.args.filter.type && $context.args.filter.type.eq && !$util.isNullOrBlank($context.args.filter.type.eq) )
    $util.qr($filterExpressionParts.add("#filterTransactionType = :filterTransactionTypeValue"))
    $util.qr($expressionNames.put("#filterTransactionType", "type")) 
    $util.qr($expressionValues.put(":filterTransactionTypeValue", $util.dynamodb.toDynamoDB($context.args.filter.type.eq)))
  #end

  ## Filter by createdAt range (example, using ModelStringFilterInput's 'between')
  #if( $context.args.filter.createdAt && $context.args.filter.createdAt.between && $context.args.filter.createdAt.between.size() == 2 )
    $util.qr($filterExpressionParts.add("#filterCreatedAt BETWEEN :startRange AND :endRange"))
    $util.qr($expressionNames.put("#filterCreatedAt", "createdAt"))
    $util.qr($expressionValues.put(":startRange", $util.dynamodb.toDynamoDB($context.args.filter.createdAt.between[0])))
    $util.qr($expressionValues.put(":endRange", $util.dynamodb.toDynamoDB($context.args.filter.createdAt.between[1])))
  #end

  ## Add other filter conditions for CurrentAccountTransaction here...

  ## Attach the combined filter expression if any parts were added
  #if( !$filterExpressionParts.isEmpty() )
    $util.qr($queryObj.put("filter", {
      "expression": $util.listJoin(" AND ", $filterExpressionParts)
      ## expressionNames and expressionValues for the filter are already part of the main query maps
      ## ($queryObj.query.expressionNames and $queryObj.query.expressionValues)
    }))
  #end
#end

## --- Final logging and return ---
#set( $finalQueryLog = $util.toJson($queryObj) )
$util.qr($ctx.log.info("TRANS_REQ_VTL_FINAL: Final DynamoDB Query Object: ${finalQueryLog}"))

$util.toJson($queryObj)