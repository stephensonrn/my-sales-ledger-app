# -------------------------------
# Sales Ledger GraphQL Schema
# -------------------------------

# --- Enums ---
enum LedgerEntryType {
  INVOICE
  CREDIT_NOTE
  INCREASE_ADJUSTMENT
  DECREASE_ADJUSTMENT
  CASH_RECEIPT
}

enum CurrentAccountTransactionType {
  PAYMENT_REQUEST
  CASH_RECEIPT
}

# --- Data Models ---
type LedgerEntry {
  id: ID!
  owner: String! # owner should be the user id (sub) or username depending on your schema
  type: LedgerEntryType!
  amount: Float!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional, could be null for non-admin created entries
}

type AccountStatus {
  id: ID!
  owner: String! # Same as in LedgerEntry, use user id or username
  totalUnapprovedInvoiceValue: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional, null for non-admin created entries
}

type CurrentAccountTransaction {
  id: ID!
  owner: String! # Same owner reference as other types
  type: CurrentAccountTransactionType!
  amount: Float!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  createdByAdmin: String # Optional for non-admin transactions
}

type UserAttribute {
  name: String!
  value: String
}

type CognitoUser {
  username: String!
  sub: String! # Sub should uniquely identify users in Cognito, useful for user reference
  status: String
  enabled: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  id: ID!
  email: String
  lastModifiedAt: AWSDateTime
  groups: [String]
  attributes: [UserAttribute]
}

# --- Structured Response Types ---
type AdminPaymentRequestResult {
  success: Boolean!
  message: String
  transactionId: ID
}

type LedgerEntryConnection {
  items: [LedgerEntry]
  nextToken: String
}

type AccountStatusConnection {
  items: [AccountStatus]
  nextToken: String
}

type CurrentAccountTransactionConnection {
  items: [CurrentAccountTransaction]
  nextToken: String
}

type UserListResult {
  users: [CognitoUser]
  nextToken: String
}

# --- Input Types ---
input CreateLedgerEntryInput {
  type: LedgerEntryType!
  amount: Float!
  description: String
}

input UpdateLedgerEntryInput {
  id: ID!
  type: LedgerEntryType
  amount: Float
  description: String
}

input UpdateAccountStatusInput {
  id: ID!
  totalUnapprovedInvoiceValue: Float!
}

input AdminCreateLedgerEntryInput {
  type: LedgerEntryType!
  amount: Float!
  description: String
  targetUserId: ID! # This is the target user for the entry, usually the user id (sub)
}

input AdminRequestPaymentForUserInput {
  targetUserId: ID! # This should be the user id (sub) of the target user
  amount: Float!
  paymentDescription: String
}

input SendPaymentRequestInput {
  amount: Float!
  toEmail: String!
  subject: String!
  body: String!
}

input AdminCreateAccountStatusInput {
  accountId: ID!
  initialUnapprovedInvoiceValue: Float!
  status: String!
}

input AdminAddCashReceiptInput {
  targetOwnerId: ID!
  amount: Float!
  description: String
}

# --- Filter Inputs ---
input ModelStringFilterInput {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  eq: ID
  ne: ID
}

input ModelFloatFilterInput {
  eq: Float
  ne: Float
  gt: Float
  lt: Float
  ge: Float
  le: Float
}

input LedgerEntryFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput
  type: ModelStringFilterInput
  createdAt: ModelStringFilterInput
}

input AccountStatusFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput
  totalUnapprovedInvoiceValue: ModelFloatFilterInput
  createdAt: ModelStringFilterInput
}

input CurrentAccountTransactionFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput
  type: ModelStringFilterInput
  createdAt: ModelStringFilterInput
}

input UserFilterInput {
  username: ModelStringFilterInput
  email: ModelStringFilterInput
  status: ModelStringFilterInput
}

# --- Queries ---
type Query @aws_cognito_user_pools {

  getLedgerEntry(id: ID!): LedgerEntry
  listLedgerEntries(
    filter: LedgerEntryFilterInput
    limit: Int
    nextToken: String
  ): LedgerEntryConnection

  getAccountStatus(id: ID!): AccountStatus
  listAccountStatuses(
    filter: AccountStatusFilterInput
    limit: Int
    nextToken: String
  ): AccountStatusConnection

  getCurrentAccountTransaction(id: ID!): CurrentAccountTransaction
  listCurrentAccountTransactions(
    filter: CurrentAccountTransactionFilterInput
    limit: Int
    nextToken: String
  ): CurrentAccountTransactionConnection

  adminListUsers(
    limit: Int
    nextToken: String
    filter: UserFilterInput
  ): UserListResult @aws_auth(cognito_groups: ["Admin"])
}

# --- Mutations ---
type Mutation @aws_cognito_user_pools {

  createLedgerEntry(input: CreateLedgerEntryInput!): LedgerEntry
  updateLedgerEntry(input: UpdateLedgerEntryInput!): LedgerEntry
  deleteLedgerEntry(id: ID!): LedgerEntry

  adminCreateLedgerEntry(input: AdminCreateLedgerEntryInput!): LedgerEntry
    @aws_auth(cognito_groups: ["Admin"])

  updateAccountStatus(input: UpdateAccountStatusInput!): AccountStatus
  adminCreateAccountStatus(input: AdminCreateAccountStatusInput!): AccountStatus
    @aws_auth(cognito_groups: ["Admin"])

  adminAddCashReceipt(input: AdminAddCashReceiptInput!): CurrentAccountTransaction
    @aws_auth(cognito_groups: ["Admin"])

  sendPaymentRequestEmail(input: SendPaymentRequestInput!): String
  adminRequestPaymentForUser(input: AdminRequestPaymentForUserInput!): AdminPaymentRequestResult
    @aws_auth(cognito_groups: ["Admin"])
}

# --- Subscriptions ---
type Subscription @aws_cognito_user_pools {
  onCreateLedgerEntry(owner: String): LedgerEntry
    @aws_subscribe(mutations: ["createLedgerEntry", "adminCreateLedgerEntry"])
}
